-- Error: tests/neg-custom-args/captures/try.scala:25:3 ----------------------------------------------------------------
23 |  val a = handle[Exception, CanThrow[Exception]] {
24 |    (x: CanThrow[Exception]) => x
25 |  }{  // error (but could be better)
   |          ^
   |          The expression's type box CT[Exception]^ is not allowed to capture the root capability `cap`.
   |          This usually means that a capability persists longer than its allowed lifetime.
26 |    (ex: Exception) => ???
27 |  }
-- Error: tests/neg-custom-args/captures/try.scala:30:65 ---------------------------------------------------------------
30 |    (x: CanThrow[Exception]) => () => raise(new Exception)(using x) // error
   |                                                                 ^
   |           (x : CanThrow[Exception]) cannot be referenced here; it is not included in the allowed capture set {}
   |           of an enclosing function literal with expected type () ->? Nothing
-- [E007] Type Mismatch Error: tests/neg-custom-args/captures/try.scala:52:2 -------------------------------------------
47 |val global: () -> Int = handle {
48 |  (x: CanThrow[Exception]) =>
49 |    () =>
50 |      raise(new Exception)(using x)
51 |      22
52 |} {  // error
   |                        ^
   |                        Found:    () ->{x, x²} Int
   |                        Required: () -> Int
   |
   |                        where:    x  is a reference to a value parameter
   |                                  x² is a reference to a value parameter
53 |  (ex: Exception) => () => 22
54 |}
   |
   | longer explanation available when compiling with `-explain`
-- Error: tests/neg-custom-args/captures/try.scala:35:11 ---------------------------------------------------------------
35 |  val xx = handle {  // error
   |           ^^^^^^
   |           local reference x leaks into outer capture set of type parameter R of method handle
