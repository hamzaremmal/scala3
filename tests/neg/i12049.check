-- [E007] Type Mismatch Error: tests/neg/i12049.scala:6:16 -------------------------------------------------------------
6 |val x: String = ??? : M[B] // error
  |                ^^^^^^^^^^
  |                Found:    M[B]
  |                Required: String
  |
  |                Note: a match type could not be fully reduced:
  |
  |                  trying to reduce  M[B]
  |                  failed since selector  B
  |                  does not match  case A => Int
  |                  and cannot be shown to be disjoint from it either.
  |                  Therefore, reduction cannot advance to the remaining case
  |
  |                    case B => String

longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/i12049.scala:14:17 ------------------------------------------------------------
14 |val y3: String = ??? : Last[Int *: Int *: Boolean *: String *: EmptyTuple]  // error
   |                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
   |                 Found:    Last[EmptyTuple.type]
   |                 Required: String
   |
   |                 Note: a match type could not be fully reduced:
   |
   |                   trying to reduce  Last[EmptyTuple.type]
   |                   failed since selector  EmptyTuple.type
   |                   matches none of the cases
   |
   |                     case _ *: _ *: t => Last[t]
   |                     case t *: EmptyTuple => t

longer explanation available when compiling with `-explain`
-- [E007] Type Mismatch Error: tests/neg/i12049.scala:22:20 ------------------------------------------------------------
22 |val z3: (A, B, A) = ??? : Reverse[(A, B, A)] // error
   |                    ^^^^^^^^^^^^^^^^^^^^^^^^
   |                    Found:    Tuple.Concat[Reverse[A *: EmptyTuple.type], (B, A)]
   |                    Required: (A, B, A)
   |
   |                    Note: a match type could not be fully reduced:
   |
   |                      trying to reduce  Tuple.Concat[Reverse[A *: EmptyTuple.type], (B, A)]
   |                      trying to reduce  Reverse[A *: EmptyTuple.type]
   |                      failed since selector  A *: EmptyTuple.type
   |                      matches none of the cases
   |
   |                        case t1 *: t2 *: ts => Tuple.Concat[Reverse[ts], (t2, t1)]
   |                        case EmptyTuple => EmptyTuple

longer explanation available when compiling with `-explain`
