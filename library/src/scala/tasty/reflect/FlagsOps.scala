package scala.tasty.reflect

trait FlagsOps extends Core {

  val Flags: FlagsModule
  abstract class FlagsModule {
    /** Is this symbol `protected` */
    def Protected: FlagSet

    /** Is this symbol `abstract` */
    def Abstract: FlagSet

    /** Is this symbol `final` */
    def Final: FlagSet

    /** Is this symbol `sealed` */
    def Sealed: FlagSet

    /** Is this symbol `case` */
    def Case: FlagSet

    /** Is this symbol `implicit` */
    def Implicit: FlagSet

    /** Is this symbol `erased` */
    def Erased: FlagSet

    /** Is this symbol `lazy` */
    def Lazy: FlagSet

    /** Is this symbol `override` */
    def Override: FlagSet

    /** Is this symbol `inline` */
    def Inline: FlagSet

    /** Is this symbol markes as a macro. An inline method containing toplevel splices */
    def Macro: FlagSet

    /** Is this symbol marked as static. Mapped to static Java member */
    def Static: FlagSet

    /** Is this symbol an object or its class (used for a ValDef or a ClassDef extends Modifier respectively) */
    def Object: FlagSet

    /** Is this symbol a trait */
    def Trait: FlagSet

    /** Is this symbol local? Used in conjunction with Private/private[Type] to mean private[this] extends Modifier proctected[this] */
    def Local: FlagSet

    /** Was this symbol generated by Scala compiler */
    def Synthetic: FlagSet

    /** Is this symbol to be tagged Java Synthetic */
    def Artifact: FlagSet

    /** Is this symbol a `var` (when used on a ValDef) */
    def Mutable: FlagSet

    /** Is this symbol a getter or a setter */
    def FieldAccessor: FlagSet

    /** Is this symbol a getter for case class parameter */
    def CaseAcessor: FlagSet

    /** Is this symbol a type parameter marked as covariant `+` */
    def Covariant: FlagSet

    /** Is this symbol a type parameter marked as contravariant `-` */
    def Contravariant: FlagSet

    /** Was this symbol imported from Scala2.x */
    def Scala2X: FlagSet

    /** Is this symbol a method with default parameters */
    def DefaultParameterized: FlagSet

    /** Is this symbol member that is assumed to be stable */
    def Stable: FlagSet

    /** Is this symbol a parameter */
    def Param: FlagSet

    /** Is this symbol a parameter accessor */
    def ParamAccessor: FlagSet
  }

}
