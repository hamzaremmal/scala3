package dokka.java.api.com.virtuslab.dokka.site

import kotlinx.html.*
import kotlinx.html.stream.createHTML
import org.jetbrains.dokka.base.renderers.html.HtmlRenderer
import org.jetbrains.dokka.pages.ContentPage
import org.jetbrains.dokka.pages.PageNode
import org.jetbrains.dokka.plugability.DokkaContext
import java.net.URI

/** HtmlRenderer with some useful functions for us.
 * TODO remove once the Dokka HtmlRenderer offers a better API
 */
open class ExtensibleHtmlRenderer(ctx: DokkaContext) : HtmlRenderer(ctx) {
    protected fun PageNode.root(path: String) = locationProvider.resolveRoot(this) + path
    protected fun resolveLink(link: String, page: PageNode): String = if (URI(link).isAbsolute) link else page.root(link)

    protected fun HEAD.linkResource(resource: String, page: PageNode) {
        when {
            resource.substringBefore('?').substringAfterLast('.') == "css" -> link(
                rel = LinkRel.stylesheet,
                href = resolveLink(resource, page)
            )
            resource.substringBefore('?').substringAfterLast('.') == "js" -> script(
                type = ScriptType.textJavaScript,
                src = resolveLink(resource, page)
            ) {
                async = true
            }
            else -> unsafe { +resource }
        }
    }

    protected fun HEAD.scriptPathToRoot(page: PageNode) {
        script { unsafe { +"""var pathToRoot = "${locationProvider.resolveRoot(page)}";""" } }
    }

    /** Builds a webpage with some content in a `<main>` tag.
     * Compared to Dokka's HtmlRenderer, it changes the layout a bit
     * and use span tags for icons instead of embedded SVGs.
     */
    override fun buildHtml(page: PageNode, resources: List<String>, content: FlowContent.() -> Unit): String =
        createHTML().html {
            head {
                meta(name = "viewport", content = "width=device-width, initial-scale=1", charset = "UTF-8")
                title(page.name)
                resources.forEach {
                    linkResource(it, page)
                }
                scriptPathToRoot(page)
            }
            body {
                // Use semantic HTML5 (nav, main, etc.) to improve accessibility,
                // and usability in some applications (e.g. reader mode)
                div {
                    id = "container"
                    div {
                        id = "leftColumn"
                        div {
                            id = "logo"
                        }
                        nav {
                            id = "sideMenu"
                        }
                    }
                    div {
                        id = "main"
                        div {
                            id = "leftToggler"
                            span("icon-toggler")
                        }
                        div {
                            id = "searchBar"
                        }
                        main {
                            content()
                        }
                        footer {
                            span("go-to-top-icon") {
                                a(href = "#container") {
                                    span("icon-vertical_align_top")
                                    text(" Back to top")
                                }
                            }
                            span("pull-right") {
                                text("Generated by ")
                                a(href = "https://github.com/lampepfl/scala3doc") { text("Scala3Doc") }
                            }
                        }
                    }
                    script(type = ScriptType.textJavaScript, src = page.root("scripts/pages.js")) {}
                    script(type = ScriptType.textJavaScript, src = page.root("scripts/main.js")) {}
                }
            }
        }
}

/** Renderer that support static pages. */
class ExternalDocsToolRenderer(ctx: DokkaContext) : ExtensibleHtmlRenderer(ctx) {
    override fun buildPageContent(context: FlowContent, page: ContentPage) {
        context.buildNavigation(page)
        fun FlowContent.render(txt: String) = div { unsafe { +txt } }
        when (val content = page.content) {
            is PreRenderedContent -> context.render(content.html)
            else -> page.content.build(context, page)
        }
    }

    override fun buildHtml(page: PageNode, resources: List<String>, content: FlowContent.() -> Unit) =
        when (page) {
            is BaseStaticSiteProcessor.DocPageNode ->
                if (!page.dri.contains(docsRootDRI)) super.buildHtml(page, resources, content)
                else createHTML().html {
                    head {
                        meta(name = "viewport", content = "width=device-width, initial-scale=1", charset = "UTF-8")
                        title(page.name)
                        page.resolved.resources.forEach {
                            linkResource(it, page)
                        }
                        scriptPathToRoot(page)
                    }
                    body {
                        unsafe { +page.resolved.html }
                    }
                }
            else ->
                super.buildHtml(page, resources, content)
        }

}
